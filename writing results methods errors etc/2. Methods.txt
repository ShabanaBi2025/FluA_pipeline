2. Methods
2.1 Bioinformatic Pipeline for Variant Calling and Consensus Generation
A custom bioinformatic pipeline was developed using Nextflow (version 25.04.6)  to process raw sequencing reads and generate consensus sequences for influenza A virus strains. The pipeline, written in Nextflow's DSL2, consists of a series of modular steps designed to ensure data quality, consistent reference usage, and accurate variant calling. The entire workflow, including all software dependencies, was managed using a Conda environment to ensure reproducibility.

2.2 Read Processing and Quality Control
Raw sequencing reads were prepared for alignment as follows:


Illumina Reads: Paired-end Illumina reads were processed for quality control and adapter trimming using Trimmomatic.


ONT Reads: Raw Oxford Nanopore Technology (ONT) reads were filtered for quality and length using Nanofilt. Reads failing to meet quality thresholds were discarded to improve downstream alignment accuracy.

2.3 Reference Genome Preparation
To ensure a consistent reference format across all stages, a dedicated process was implemented to prepare the reference genome files prior to alignment. This step was crucial for resolving errors related to mismatched sequence headers. For each reference FASTA file:

The file headers were cleaned to remove descriptive text, leaving only the accession number (e.g., 

>NC_026438.1) using sed.

A FASTA index (

.fai) for samtools was generated using samtools faidx.

A BWA index was created using 

bwa index to enable efficient alignment of Illumina reads.

The cleaned and indexed reference files were used for all subsequent alignment and variant calling steps.

2.4 Sequence Alignment
The quality-controlled reads were aligned to the prepared reference genomes. The alignment tool was selected based on the sequencing platform:


Illumina Alignment: Paired-end Illumina reads were aligned to the indexed reference using bwa mem. The output was then converted to BAM format, sorted, and indexed using 

samtools.


ONT Alignment: Single-end ONT reads were aligned to the indexed reference using minimap2. The output was similarly converted, sorted, and indexed using 

samtools.

2.5 Variant Calling and Consensus Generation
Variant calling and consensus generation were performed on the sorted and indexed BAM files:

Variant Calling: Variants were called using bcftools mpileup and bcftools call. The process generated a compressed VCF file (

.vcf.gz) containing variant information.


Consensus Generation: A final consensus FASTA sequence was generated by applying the variants from the VCF file to the cleaned reference FASTA using bcftools consensus. A specific check was included to handle cases where no variants were found, in which case the reference genome was used as the consensus.

Note: The scripts refer to bcftools, bwa, minimap2, and samtools which are commonly used in bioinformatics. The provided context does not specify the exact versions, but the pipeline's use of a 

conda environment  ensures that consistent versions of these tools are used for each run.





2.1 Pipeline Overview: Start with a high-level description of the entire Nextflow pipeline, explaining its purpose and the general flow from raw reads to a consensus sequence. You could include a simple diagram of the workflow here.

2.2 Data Acquisition and Preprocessing:

Detail the source of your raw sequencing reads.

Explain the role of fastqc in the quality control process.

Describe the exact parameters used for Trimmomatic (e.g., quality score, window size, minimum length) and Nanofilt (e.g., minimum quality score, read length cutoff).

2.3 Reference Genome Preparation:

Explain the necessity of having a consistent reference format.

Detail the sed command used to clean the FASTA headers.

Specify the purpose of creating both a samtools index (samtools faidx) and a BWA index (bwa index).

2.4 Sequence Alignment:

Describe the alignment of Illumina reads using bwa mem, including key parameters used in the command.

Describe the alignment of ONT reads using minimap2, noting its specific parameters for ONT data.

Explain the role of samtools view and samtools sort in generating the final sorted and indexed BAM files.

2.5 Variant Calling and Consensus Generation:

Detail the bcftools mpileup command and its key parameters for calling variants.

Describe how bcftools call was used to identify SNPs and indels.

Explain the final step of generating the consensus sequence with bcftools consensus, mentioning the file inputs (VCF and cleaned FASTA) and the output.

2.6 Software and Version Control:

List all the software tools used in a table, including their specific versions (e.g., bcftools v1.12).

Explain how you used a conda environment to manage these dependencies and ensure reproducibility.



This section outlines the bioinformatics workflow used to process and analyze sequencing data from influenza virus samples. The pipeline, developed using Nextflow DSL2, automates quality control, read trimming and filtering, genome alignment, variant calling, and consensus sequence generation. The methodology was iteratively refined based on data quality assessments to ensure the highest possible accuracy for downstream analyses, including the detection of indels.

1. Data Preparation and Quality Control
The workflow began by ingesting raw sequencing data in FASTQ format. A key step in ensuring data quality was the initial assessment using FastQC. This tool provided a comprehensive report on read quality, adapter content, and sequence length distribution. The raw reads were categorized by platform (Illumina or Oxford Nanopore Technologies (ONT)) and processed accordingly.

1.1 Read Trimming and Filtering
Illumina Reads: To improve the quality of Illumina paired-end reads, the Trimmomatic tool was employed. The initial parameters were quite stringent, including a 

SLIDINGWINDOW:4:20 and MINLEN:50, which resulted in a low mapping rate of approximately 32.21%. To address this, the trimming parameters were adjusted to be less aggressive. The updated settings included a 

SLIDINGWINDOW:5:15 and a reduced MINLEN:30, aiming to retain more reads that might otherwise be discarded due to quality or length.


ONT Reads: For ONT reads, the NanoFilt tool was used to perform quality filtering. This step is crucial for ONT data due to the higher indel error rate compared to Illumina sequencing.


2. Genome Alignment and Consensus Generation
Reads were aligned to a reference genome specific to the H1N1 influenza strain. The choice of alignment tool depended on the sequencing platform to account for platform-specific error profiles.

Illumina Reads: The trimmed Illumina paired-end reads were aligned using BWA-MEM. The resulting alignments were then processed with 

Samtools to convert the output to BAM format, sort the reads, and generate a flagstat report to assess the mapping efficiency. A recurring issue with a corrupted BAM file (

Invalid GZIP header) was encountered and was addressed by ensuring sufficient memory and disk resources were allocated to the alignment process. The final sorted BAM file was then used for variant calling.


ONT Reads: The filtered ONT reads were aligned using Minimap2, an aligner optimized for long reads, which is essential for capturing indels. The alignments were similarly processed with Samtools to create sorted BAM files. To improve the accuracy of the final consensus sequence and correctly identify indels, a crucial polishing step was added using 

Medaka. The 

Medaka_consensus process was used to generate a polished consensus FASTA file and a VCF file containing indels and SNVs.

3. Variant Calling and Downstream Analysis
Variant calling was performed to identify genetic variations between the sequenced samples and the reference genome.

Variant Calling: For both Illumina and ONT data, variants were called using BCFTools mpileup. The resulting VCF file was used to generate a consensus sequence with 

BCFTools consensus.


In-silico Analysis: The final consensus sequences were analyzed using Nextclade to determine the viral clade and identify key amino acid mutations. This analysis was a critical step in understanding the genetic diversity of the sequenced samples.


Final Reporting: All log files and reports from the different stages of the pipeline (FastQC, Trimmomatic, BWA, Minimap2, Medaka, BCFTools, and Nextclade) were collected and aggregated into a single, comprehensive HTML report using MultiQC for easy interpretation and comparison across samples.

4. Conclusion and Pipeline Refinements
The pipeline, as described, was successful in generating high-quality consensus sequences for both Illumina and ONT sequencing data. The addition of an ONT-specific polishing step with Medaka and the iterative optimization of trimming parameters were critical for overcoming technical challenges and ensuring the reliable detection of indels. The use of Nextflow enabled the reusability and scalability of this robust and refined bioinformatics workflow.

