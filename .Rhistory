# This will save the file in your current R working directory.
write_csv(clade_summary, paste0(strain_id, "_clade_summary.csv"))
# Save the summary table to a new CSV file
# This will save the file in your current R working directory.
write_csv(clade_summary, paste0(strain_id, "_clade_summary.csv"))
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: We now specify the directory and the strain.
base_dir <- "\\wsl.localhost\\Ubuntu\\home\\shabana\\error_flu-pipeline\\results\\nextclade"
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: We now specify the directory and the strain.
base_dir <- "\\wsl.localhost\\Ubuntu\\home\\shabana\\error_flu-pipeline\\results\\nextclade"
# Load necessary libraries
library(readr)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: We now specify the directory and the strain.
base_dir <- "\\wsl.localhost\\Ubuntu\\home\\shabana\\error_flu-pipeline\\results\\nextclade"
source("//wsl.localhost/Ubuntu/home/shabana/error_flu-pipeline/scripts/summarise_results.R")
library(dplyr)
library(ggplot2)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: We now specify the directory and the strain.
base_dir <- "\\wsl.localhost\\Ubuntu\\home\\shabana\\error_flu-pipeline\\results\\nextclade"
strain_id <- "h1n1"
# Create a full path to the strain's directory
strain_dir <- file.path(base_dir, strain_id)
# Find all Nextclade CSV files in that directory
nextclade_files <- list.files(
path = strain_dir,
pattern = "nextclade.csv$",
full.names = TRUE
)
# Read all files and combine them into a single data frame
# The map_dfr function from dplyr is perfect for this task.
nextclade_data <- nextclade_files %>%
read_delim(delim = ";") %>%
bind_rows()
# --- 2. Perform Analysis ---
# The Nextclade column for clade can be 'clade' or 'clade_nextstrain'
if ("clade_nextstrain" %in% colnames(nextclade_data)) {
clade_column <- "clade_nextstrain"
} else if ("clade" %in% colnames(nextclade_data)) {
clade_column <- "clade"
} else {
stop("Could not find a 'clade' column in the Nextclade output file.")
}
clade_summary <- nextclade_data %>%
count(!!sym(clade_column), sort = TRUE) %>%
rename(Clade = !!sym(clade_column), Count = n)
setwd("//wsl.localhost/Ubuntu/home/shabana/error_flu-pipeline")
# Save the summary table to a new CSV file
# This will save the file in your current R working directory.
write_csv(clade_summary, paste0(strain_id, "_clade_summary.csv"))
#!/usr/bin/env Rscript
# Load necessary libraries
library(readr)
library(dplyr)
library(ggplot2)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: We now specify the directory and the strain.
base_dir <- "\\wsl.localhost\\Ubuntu\\home\\shabana\\error_flu-pipeline\\results\\nextclade"
strain_id <- "h1n1"
# Create a full path to the strain's directory
strain_dir <- file.path(base_dir, strain_id)
# Find all Nextclade CSV files in that directory
nextclade_files <- list.files(
path = strain_dir,
pattern = "nextclade.csv$",
full.names = TRUE
)
# Read all files and combine them into a single data frame
# The map_dfr function from dplyr is perfect for this task.
nextclade_data <- nextclade_files %>%
read_delim(delim = ";") %>%
bind_rows()
# --- 2. Perform Analysis ---
# The Nextclade column for clade can be 'clade' or 'clade_nextstrain'
if ("clade_nextstrain" %in% colnames(nextclade_data)) {
clade_column <- "clade_nextstrain"
} else if ("clade" %in% colnames(nextclade_data)) {
clade_column <- "clade"
} else {
stop("Could not find a 'clade' column in the Nextclade output file.")
}
#!/usr/bin/env Rscript
# Load necessary libraries
# To ensure you have these packages installed, run the following line in your R console:
# install.packages(c("readr", "dplyr", "ggplot2"))
library(readr)
library(dplyr)
library(ggplot2)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: We now specify the directory and the strain.
# IMPORTANT: Adjust this path to your specific working directory and file structure.
base_dir <- "\\wsl.localhost\\Ubuntu\\home\\shabana\\error_flu-pipeline\\results\\nextclade"
strain_id <- "h1n1"
# Create a full path to the strain's directory
strain_dir <- file.path(base_dir, strain_id)
# Find all Nextclade CSV files in that directory
# We are now looking for files within the subdirectories of each sample
nextclade_files <- list.files(
path = strain_dir,
pattern = "nextclade.csv$",
recursive = TRUE,
full.names = TRUE
)
# Check if any files were found
if (length(nextclade_files) == 0) {
stop("No Nextclade output files found in the specified directory.")
}
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: We now specify the directory and the strain.
# IMPORTANT: Adjust this path to your specific working directory and file structure.
base_dir <- "\\wsl.localhost\\Ubuntu\\home\\shabana\\error_flu-pipeline\\results\\nextclade"
#!/usr/bin/env Rscript
# Load necessary libraries
# To ensure you have these packages installed, run the following line in your R console:
# install.packages(c("readr", "dplyr", "ggplot2"))
library(readr)
library(dplyr)
library(ggplot2)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: We now specify the directory and the strain.
# IMPORTANT: Adjust this path to your specific working directory and file structure.
base_dir <- "\\wsl.localhost\\Ubuntu\\home\\shabana\\error_flu-pipeline\\results\\nextclade"
strain_id <- "h1n1"
# Create a full path to the strain's directory
strain_dir <- file.path(base_dir, strain_id)
# Find all Nextclade CSV files in that directory
# We are now looking for files within the subdirectories of each sample
nextclade_files <- list.files(
path = strain_dir,
pattern = "nextclade.csv$",
recursive = TRUE,
full.names = TRUE
)
# Check if any files were found
if (length(nextclade_files) == 0) {
stop("No Nextclade output files found in the specified directory.")
}
#!/usr/bin/env Rscript
# Load necessary libraries
# To ensure you have these packages installed, run the following line in your R console:
# install.packages(c("readr", "dplyr", "ggplot2"))
library(readr)
library(dplyr)
library(ggplot2)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: The path has been corrected to use forward slashes (`/`).
# IMPORTANT: Adjust this path to your specific working directory and file structure.
base_dir <- "//wsl.localhost/Ubuntu/home/shabana/error_flu-pipeline/results/nextclade"
strain_id <- "h1n1"
# Create a full path to the strain's directory
strain_dir <- file.path(base_dir, strain_id)
# Find all Nextclade CSV files in that directory
# We are now looking for files within the subdirectories of each sample
nextclade_files <- list.files(
path = strain_dir,
pattern = "nextclade.csv$",
recursive = TRUE,
full.names = TRUE
)
# Check if any files were found
if (length(nextclade_files) == 0) {
stop("No Nextclade output files found in the specified directory.")
}
# Read all files and combine them into a single data frame
# The map_dfr function from dplyr is perfect for this task.
nextclade_data <- nextclade_files %>%
read_delim(delim = ";", show_col_types = FALSE) %>%
bind_rows()
# --- 2. Perform Analysis ---
# The Nextclade column for clade can be 'clade' or 'clade_nextstrain'
if ("clade_nextstrain" %in% colnames(nextclade_data)) {
clade_column <- "clade_nextstrain"
} else if ("clade" %in% colnames(nextclade_data)) {
clade_column <- "clade"
} else {
stop("Could not find a 'clade' column in the Nextclade output file.")
}
clade_summary <- nextclade_data %>%
count(!!sym(clade_column), sort = TRUE) %>%
rename(Clade = !!sym(clade_column), Count = n)
# Save the summary table to a new CSV file
# This will save the file in your current R working directory.
write_csv(clade_summary, paste0(strain_id, "_clade_summary.csv"))
# Example: Create a plot of QC scores
# Ensure qc.overallScore is treated as a numeric column for the histogram.
qc_plot <- ggplot(nextclade_data, aes(x = as.numeric(qc.overallScore))) +
geom_histogram(binwidth = 10, fill = "skyblue", color = "black") +
labs(
title = paste("Overall QC Score Distribution for", strain_id),
x = "QC Score",
y = "Number of Samples"
) +
theme_minimal()
# Save the plot to a new PNG file
# This will save the file in your current R working directory.
ggsave(paste0(strain_id, "_qc_plot.png"), plot = qc_plot, width = 8, height = 6)
#!/usr/bin/env Rscript
# Load necessary libraries
# To ensure you have these packages installed, run the following line in your R console:
# install.packages(c("readr", "dplyr", "ggplot2"))
library(readr)
library(dplyr)
library(ggplot2)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: The path has been corrected to use forward slashes (`/`).
# IMPORTANT: Adjust this path to your specific working directory and file structure.
base_dir <- "//wsl.localhost/Ubuntu/home/shabana/error_flu-pipeline/results/nextclade"
strain_id <- "h3n2"
# Create a full path to the strain's directory
strain_dir <- file.path(base_dir, strain_id)
# Find all Nextclade CSV files in that directory
# We are now looking for files within the subdirectories of each sample
nextclade_files <- list.files(
path = strain_dir,
pattern = "nextclade.csv$",
recursive = TRUE,
full.names = TRUE
)
# Check if any files were found
if (length(nextclade_files) == 0) {
stop("No Nextclade output files found in the specified directory.")
}
# Read all files and combine them into a single data frame
# The map_dfr function from dplyr is perfect for this task.
nextclade_data <- nextclade_files %>%
read_delim(delim = ";", show_col_types = FALSE) %>%
bind_rows()
# --- 2. Perform Analysis ---
# The Nextclade column for clade can be 'clade' or 'clade_nextstrain'
if ("clade_nextstrain" %in% colnames(nextclade_data)) {
clade_column <- "clade_nextstrain"
} else if ("clade" %in% colnames(nextclade_data)) {
clade_column <- "clade"
} else {
stop("Could not find a 'clade' column in the Nextclade output file.")
}
clade_summary <- nextclade_data %>%
count(!!sym(clade_column), sort = TRUE) %>%
rename(Clade = !!sym(clade_column), Count = n)
# Save the summary table to a new CSV file
# This will save the file in your current R working directory.
write_csv(clade_summary, paste0(strain_id, "_clade_summary.csv"))
# Example: Create a plot of QC scores
# Ensure qc.overallScore is treated as a numeric column for the histogram.
qc_plot <- ggplot(nextclade_data, aes(x = as.numeric(qc.overallScore))) +
geom_histogram(binwidth = 10, fill = "skyblue", color = "black") +
labs(
title = paste("Overall QC Score Distribution for", strain_id),
x = "QC Score",
y = "Number of Samples"
) +
theme_minimal()
# Save the plot to a new PNG file
# This will save the file in your current R working directory.
ggsave(paste0(strain_id, "_qc_plot.png"), plot = qc_plot, width = 8, height = 6)
#!/usr/bin/env Rscript
# Load necessary libraries
# To ensure you have these packages installed, run the following line in your R console:
# install.packages(c("readr", "dplyr", "ggplot2"))
library(readr)
library(dplyr)
library(ggplot2)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: The path has been corrected to use forward slashes (`/`).
# IMPORTANT: Adjust this path to your specific working directory and file structure.
base_dir <- "//wsl.localhost/Ubuntu/home/shabana/error_flu-pipeline"
strain_id <- "h1n1"
# Create a full path to the strain's data directory
data_dir <- file.path(base_dir, "results", "nextclade", strain_id)
# Set the output directory to the pipeline's root folder
output_dir <- file.path(base_dir, "results", "r_analysis", strain_id)
# Create the output directory if it doesn't exist
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
# Find all Nextclade CSV files in that directory
# We are now looking for files within the subdirectories of each sample
nextclade_files <- list.files(
path = data_dir,
pattern = "nextclade.csv$",
recursive = TRUE,
full.names = TRUE
)
# Check if any files were found
if (length(nextclade_files) == 0) {
stop("No Nextclade output files found in the specified directory.")
}
# Read all files and combine them into a single data frame
# The map_dfr function from dplyr is perfect for this task.
nextclade_data <- nextclade_files %>%
read_delim(delim = ";", show_col_types = FALSE) %>%
bind_rows()
# --- 2. Perform Analysis ---
# The Nextclade column for clade can be 'clade' or 'clade_nextstrain'
if ("clade_nextstrain" %in% colnames(nextclade_data)) {
clade_column <- "clade_nextstrain"
} else if ("clade" %in% colnames(nextclade_data)) {
clade_column <- "clade"
} else {
stop("Could not find a 'clade' column in the Nextclade output file.")
}
clade_summary <- nextclade_data %>%
count(!!sym(clade_column), sort = TRUE) %>%
rename(Clade = !!sym(clade_column), Count = n)
# Save the summary table to a new CSV file
# This will save the file in your specified output directory.
write_csv(clade_summary, file.path(output_dir, paste0(strain_id, "_clade_summary.csv")))
# Example: Create a plot of QC scores
# Ensure qc.overallScore is treated as a numeric column for the histogram.
qc_plot <- ggplot(nextclade_data, aes(x = as.numeric(qc.overallScore))) +
geom_histogram(binwidth = 10, fill = "skyblue", color = "black") +
labs(
title = paste("Overall QC Score Distribution for", strain_id),
x = "QC Score",
y = "Number of Samples"
) +
theme_minimal()
# Save the plot to a new PNG file
# This will save the file in your specified output directory.
ggsave(file.path(output_dir, paste0(strain_id, "_qc_plot.png")), plot = qc_plot, width = 8, height = 6)
cat("R analysis complete. Output files saved to:", output_dir, "\n")
#!/usr/bin/env Rscript
# Load necessary libraries
# To ensure you have these packages installed, run the following line in your R console:
# install.packages(c("readr", "dplyr", "ggplot2"))
library(readr)
library(dplyr)
library(ggplot2)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: The path has been corrected to use forward slashes (`/`).
# IMPORTANT: Adjust this path to your specific working directory and file structure.
base_dir <- "//wsl.localhost/Ubuntu/home/shabana/error_flu-pipeline"
strain_id <- "h1n1"
# Create a full path to the strain's data directory
data_dir <- file.path(base_dir, "results", "nextclade", strain_id)
# Set the output directory to the pipeline's root folder
output_dir <- file.path(base_dir, "results", "r_analysis", strain_id)
# Create the output directory if it doesn't exist
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
# Find all Nextclade CSV files in that directory
# We are now looking for files within the subdirectories of each sample
nextclade_files <- list.files(
path = data_dir,
pattern = "nextclade.csv$",
recursive = TRUE,
full.names = TRUE
)
# Check if any files were found
if (length(nextclade_files) == 0) {
stop("No Nextclade output files found in the specified directory.")
}
# Read all files and combine them into a single data frame
# The map_dfr function from dplyr is perfect for this task.
nextclade_data <- nextclade_files %>%
read_delim(delim = ";", show_col_types = FALSE) %>%
bind_rows()
# NEW: Print the structure of the data to verify what R is reading
cat("Data structure after reading files:\n")
print(str(nextclade_data))
# --- 2. Perform Analysis ---
# The Nextclade column for clade can be 'clade' or 'clade_nextstrain'
if ("clade_nextstrain" %in% colnames(nextclade_data)) {
clade_column <- "clade_nextstrain"
} else if ("clade" %in% colnames(nextclade_data)) {
clade_column <- "clade"
} else {
stop("Could not find a 'clade' column in the Nextclade output file.")
}
clade_summary <- nextclade_data %>%
count(!!sym(clade_column), sort = TRUE) %>%
rename(Clade = !!sym(clade_column), Count = n)
# Save the summary table to a new CSV file
# This will save the file in your specified output directory.
write_csv(clade_summary, file.path(output_dir, paste0(strain_id, "_clade_summary.csv")))
# Example: Create a plot of QC scores
# We will now plot the Alignment Score, which is often a more reliable
# continuous metric for QC.
qc_plot <- ggplot(nextclade_data, aes(x = alignmentScore)) +
geom_histogram(binwidth = 100, fill = "skyblue", color = "black") +
labs(
title = paste("Alignment Score Distribution for", strain_id),
x = "Alignment Score",
y = "Number of Samples"
) +
theme_minimal()
# Save the plot to a new PNG file
# This will save the file in your specified output directory.
ggsave(file.path(output_dir, paste0(strain_id, "_alignment_score_plot.png")), plot = qc_plot, width = 8, height = 6)
cat("R analysis complete. Output files saved to:", output_dir, "\n")
#!/usr/bin/env Rscript
# Load necessary libraries
# To ensure you have these packages installed, run the following line in your R console:
# install.packages(c("readr", "dplyr", "ggplot2"))
library(readr)
library(dplyr)
library(ggplot2)
# --- 1. Read Input Data ---
# To run this script in RStudio, you need to manually define the
# directory containing the Nextclade output files for the strain
# and the strain ID itself.
#
# UPDATED: The path has been corrected to use forward slashes (`/`).
# IMPORTANT: Adjust this path to your specific working directory and file structure.
base_dir <- "//wsl.localhost/Ubuntu/home/shabana/error_flu-pipeline"
strain_id <- "h3n2"
# Create a full path to the strain's data directory
data_dir <- file.path(base_dir, "results", "nextclade", strain_id)
# Set the output directory to the pipeline's root folder
output_dir <- file.path(base_dir, "results", "r_analysis", strain_id)
# Create the output directory if it doesn't exist
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
# Find all Nextclade CSV files in that directory
# We are now looking for files within the subdirectories of each sample
nextclade_files <- list.files(
path = data_dir,
pattern = "nextclade.csv$",
recursive = TRUE,
full.names = TRUE
)
# Check if any files were found
if (length(nextclade_files) == 0) {
stop("No Nextclade output files found in the specified directory.")
}
# Read all files and combine them into a single data frame
# The map_dfr function from dplyr is perfect for this task.
nextclade_data <- nextclade_files %>%
read_delim(delim = ";", show_col_types = FALSE) %>%
bind_rows()
# NEW: Print the structure of the data to verify what R is reading
cat("Data structure after reading files:\n")
print(str(nextclade_data))
# --- 2. Perform Analysis ---
# The Nextclade column for clade can be 'clade' or 'clade_nextstrain'
if ("clade_nextstrain" %in% colnames(nextclade_data)) {
clade_column <- "clade_nextstrain"
} else if ("clade" %in% colnames(nextclade_data)) {
clade_column <- "clade"
} else {
stop("Could not find a 'clade' column in the Nextclade output file.")
}
clade_summary <- nextclade_data %>%
count(!!sym(clade_column), sort = TRUE) %>%
rename(Clade = !!sym(clade_column), Count = n)
# Save the summary table to a new CSV file
# This will save the file in your specified output directory.
write_csv(clade_summary, file.path(output_dir, paste0(strain_id, "_clade_summary.csv")))
# Example: Create a plot of QC scores
# We will now plot the Alignment Score, which is often a more reliable
# continuous metric for QC.
qc_plot <- ggplot(nextclade_data, aes(x = alignmentScore)) +
geom_histogram(binwidth = 100, fill = "skyblue", color = "black") +
labs(
title = paste("Alignment Score Distribution for", strain_id),
x = "Alignment Score",
y = "Number of Samples"
) +
theme_minimal()
# Save the plot to a new PNG file
# This will save the file in your specified output directory.
ggsave(file.path(output_dir, paste0(strain_id, "_alignment_score_plot.png")), plot = qc_plot, width = 8, height = 6)
packageVersion("tidyr")
library(tidyr)
library(dplyr)

df <- data.frame(
  Sample = c("A", "A", "B", "B"),
  Pos = c(1, 2, 1, 3),
  Present = 1L
)

pivot_wider(df,
            names_from = Sample,
            values_from = Present,
            values_fill = 0L)

library(tidyr)
library(dplyr)

df <- data.frame(
  Sample = c("A", "A", "B", "B"),
  Pos = c(1, 2, 1, 3),
  Present = 1L
)

pivot_wider(df,
            names_from = Sample,
            values_from = Present,
            values_fill = 0L)

q()
